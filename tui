#! /usr/bin/env bash

# Turn off command echo
set +x

# Function to load project name and executables from .cabal file
load_project_info_from_cabal() {
  # Find the .cabal file in the current directory
  local cabal_file=$(find . -maxdepth 1 -name "*.cabal")
  if [[ -z "$cabal_file" ]]; then
    echo "No .cabal file found in the current directory."
    exit 1
  fi

  # Parse the .cabal file for the project name
  local project_name=$(grep "^name:" "$cabal_file" | awk '{print $2}')
  if [[ -z "$project_name" ]]; then
    echo "No project name found in the .cabal file."
    exit 1
  fi
  export PROJECT_NAME="$project_name"

  # Initialize the executables array
  declare -gA executables

  # Parse the .cabal file for executable names
  while IFS= read -r line; do
    local exe_name=$(echo "$line" | awk '{print $2}')
    executables["$exe_name"]=""
  done < <(grep "^executable" "$cabal_file")
}

# Function to build a specific executable
build_exe() {
  local exeName=$1
  echo "Building $exeName..."
  nix build .#$PROJECT_NAME:exe:$exeName --show-trace
}

# Function to build all executables
build_all_exes() {
  echo "Building all executables..."
  for exe in "${!executables[@]}"; do
    build_exe "$exe"
  done
}

# Function to run a specific executable, optionally with arguments
run_exe() {
  local exeName=$1
  shift # Remove the first argument, which is the executable name
  local args="$@"
  echo "Running $exeName with arguments: $args"
  ./result/bin/$exeName $args
}

# Function to collect garbage
collect_garbage() {
  echo "Collecting garbage..."
  nix-collect-garbage -d
  echo "Garbage collection complete."
}

# Function to update the flake
update_flake() {
  echo "Updating flake..."
  nix flake update
  echo "Flake update complete."
}

# Load project info from the .cabal file
load_project_info_from_cabal

# Main menu
PS3='Please enter your choice: '
options=("Build all executables" "Build and Run specific executable" "Collect Garbage" "Update Flake" "Quit")

select opt in "${options[@]}"
do
    case $opt in
        "Build all executables")
            build_all_exes
            break
            ;;
        "Build and Run specific executable")
            echo "Select an executable to build and run:"
            select exe in "${!executables[@]}"
            do
                prompt=${executables[$exe]}
                if [[ -n $prompt ]]; then
                    echo "$prompt"
                    read additional_args
                fi
                build_exe $exe
                run_exe $exe $additional_args
                break 2
            done
            ;;
        "Collect Garbage")
            collect_garbage
            break
            ;;
        "Update Flake")
            update_flake
            break
            ;;
        "Quit")
            break
            ;;
        *) echo "Invalid option $REPLY";;
    esac
done
